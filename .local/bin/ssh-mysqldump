#!/bin/bash
# Do a mysqldump via ssh and store it in a local timestamped file.
# https://github.com/janmoesen/tilde/blob/master/.bash/commands

function ssh-mysqldump {
  local timestamp="$(date +'%Y%m%d-%H%M%S')";
  if [ -z "$1" -o "$1" = '--help' ]; then
    local filename="$timestamp-ssh_host-database_name.sql";
    echo "Usage: ${FUNCNAME[0]} ssh_host [database_name]";
    echo "This will create a file called $filename in this directory.";

    # Do not return an error when the user explicitly requested help.
    [ "$1" = '--help' ];
    return $?;
  fi >&2;

  # Determine the host and the database, with the database name defaulting
  # to the host name (or SSH config alias).
  local host="$1";
  local database="$host";
  shift;
  if (($#)) && [ "${1:0:1}" != '-' ]; then
    database="$1";
    shift;
  fi;

  # I prefer one INSERT statement per record, so by default, disable the
  # extended INSERT syntax. Unless there is an explicit option in the
  # arguments.
  local has_extended_insert_option=false;

  # By default, do not lock the tables while dumping. This is slightly less
  # accurate, but locking tables used in production can wreak havoc. Prefer
  # uptime to correctness.
  local has_lock_all_tables_option=false;
  local has_lock_tables_option=false;

  local arg opts=() args=();
  for arg; do
    # Escape the meta-characters in the arguments so they are safe for
    # the remote shell.
    if [ "${arg:0:1}" = '-' ]; then
      opts+=("$(printf '%q' "$arg")");
    else
      args+=("$(printf '%q' "$arg")");
    fi;

    # See if our default options are overridden.
    if [[ "$arg" =~ ^--(skip-)?extended-insert$ ]]; then
      has_extended_insert_option=true;
    elif [[ "$arg" =~ ^--(skip-)?lock-all-tables$ ]]; then
      has_lock_all_tables_option=true;
    elif [[ "$arg" =~ ^--(skip-)?lock-tables$ ]]; then
      has_lock_tables_option=true;
    fi;
  done;
  $has_extended_insert_option || opts+=('--skip-extended-insert');
  $has_lock_all_tables_option || opts+=('--skip-lock-all-tables');
  $has_lock_tables_option || opts+=('--skip-lock-tables');
  local filename="$timestamp-${host//\//-}-${database//\//-}.sql";

  # Finally, run the remote mysqldump and store the result locally.
  # If you want compression, set it in your ~/.ssh/config. I quote the man
  # page: "[ Compression ] will only slow down things on fast networks."
  if [ -t 1 ]; then
    ssh -- "$host" mysqldump "${opts[@]}" "$database" "${args[@]}" > "$filename";
  else
    echo "Stdout is not a terminal, so I won't save to $filename." >&2;
    ssh -- "$host" mysqldump "${opts[@]}" "${args[@]}" "$database";
  fi;
  local result=$?;

  if [ -s "$filename" ]; then
    ls -dalF "$filename";
  else
    rm -f "$filename";
  fi;
  return $result;
}
ssh-mysqldump $@
