#!/bin/bash
# A dead simple time tracking/logging script.
#
# Configuration:
# Local computer: export TRACK_SSH="REMOTE_ALIAS"
# Remote computer: export TRACK_LOG_FILE="PATH_TO_A_LOG_FILE"

# Log file path defined to be evaluated either locally or remotely
[[ -n "$TRACK_SSH" ]] && log_file="\$TRACK_LOG_FILE" || log_file="$TRACK_LOG_FILE"

# Current time information
todays_date=$(date '+%Y-%m-%d')
timestamp=$(date '+%H:%M')

# Helper functions
run_remotely() { eval ssh -q $TRACK_SSH "$1"; }
run() { [[ "$TRACK_SSH" ]] && run_remotely "$1" || eval "$1"; }
print_h() { echo -e "\033[1;33m$1\033[0m"; } # Heading
print_e() { echo -e "\033[0;31m$1\033[0m"; } # Error
sec_to_hour() {
  local hours=$(($1/3600))
  local mins=$(($1/60-$hours*60))
  printf "%d:%02d" $hours $mins
}
output() {
  perl -pe 's/\d+(")$/$i++.$1/e;' | awk -F "\t" '{\
    output="\033[1m" $1 " " $2 " \033[0;33mâ†’\033[0m";\
    for (i=3; i<=NF;i++) { output=output " "$i }\
    print output\
  }'
}

usage() {
  cat << HELP
Usage: track [action]

Dead simple time tracking / logging script.

Options:
  --show | Show the latest log entries, takes either NULL, a limiting number,
          'today' or 'time', e.g., 'track --show 10'
  --find | Filters through log entries with grep,
           e.g., 'track --find Added\ function'
  --help | Show this output
  *      | Everything else passed will be logged. If you begin something in the
           format HH:MM it will be used as a timestamp. If you only enter 'END'
           it will be used to track time from the previous message.
HELP
}

calculate_time() {
  local prev_line=""
  local not_calculated=( )
  local calculated=( )
  local total_time=0

  while read line; do
    local message=${line:17}
    local prev_message=${prev_line:17}

    # Onlt filter messaged beginning with END
    if [[ "${message}" == "END" ]]; then

      local start_time=${prev_line:11:5}
      local end_time=${line:11:5}
      local duration=$(($(date --date "$end_time" +%s)-$(date --date "$start_time" +%s)))
      local output_msg="${start_time}-${end_time}\t$(sec_to_hour $duration)h\t${prev_message}"

      calculated[${#calculated[*]}]="$output_msg"
      unset not_calculated[${#not_calculated[@]}-1] # Pop
      total_time=$(($total_time+$duration))
    else
      not_calculated[${#not_calculated[*]}]="$line"
    fi
    prev_line="$line"
  done

  if [[ ${#calculated[@]} -ne 0 ]]; then
    print_h "Time tracked today"
    for i in "${calculated[@]}"; do echo -e "$i" | output; done
  else
    print_h "Nothing tracked today"
  fi
  if [[ ${#not_calculated[@]} -ne 0 ]]; then
    print_h "\nCould not calculate duration"
    for i in "${not_calculated[@]}"; do echo -e "$i" | output; done
  fi
  if [[ $total_time -ne 0 ]]; then
    print_h "\nTotal time today:\033[0m $(sec_to_hour $total_time)h"
  fi
}

show() {
  if [[ "$1" == "today" ]]; then
    run "cat $log_file" | grep "^${todays_date}" | output
  else 
    if [[ "$1" == "time" ]]; then
      run "cat $log_file" | grep "^${todays_date}" | calculate_time
    else
      [[ "$1" =~ ^[[:digit:]]+ ]] && count=$1
      run "cat $log_file" | tail -${count:-20} | output
    fi
  fi
}

log() {
  # A timestamp was passed, use it
  if [[ "$1" =~ ^[[:digit:]]{2}:[[:digit:]]{2} ]]; then
    timestamp=$1
    shift
  fi

  local entry="${todays_date}\t${timestamp}\t$*"
  run "echo -e \"$entry\" >> $log_file"

  if test $? != 0; then
    print_e "Something went horribly wrong!"
    exit 1
  fi

  echo -e "$entry" | output
}

# Filter through log content with grep
find_grep() {
  run "cat $log_file" | grep "$1" | output
}

# Undo last write
undo() {
  run "sed '\$d' < $log_file > /tmp/track; mv /tmp/track $log_file"
}

case "$1" in
  --help|-h) usage ;;
  --show|-s) shift && show "$1" ;;
  --find|-f) shift && find_grep "$@" ;;
  --undo|-u) undo ;;
  *) log $* ;;
esac

unset todays_date timestamp
exit $?
